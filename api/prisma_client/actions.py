# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class Application_logsActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Application_logs]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Application_logs.prisma().query_raw(
            'SELECT * FROM Application_logs WHERE id = $1',
            1103527590,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Application_logs
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Application_logs.prisma().query_first(
            'SELECT * FROM Application_logs WHERE session_id = $1',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.Application_logsCreateInput,
        include: Optional[types.Application_logsInclude] = None
    ) -> _PrismaModelT:
        """Create a new Application_logs record.

        Parameters
        ----------
        data
            Application_logs record data
        include
            Specifies which relations should be loaded on the returned Application_logs model

        Returns
        -------
        prisma.models.Application_logs
            The created Application_logs record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Application_logs record from just the required fields
        application_logs = await Application_logs.prisma().create(
            data={
                # data to create a Application_logs record
                'session_id': 'ggciceaie',
                'user_query': 'bbehjachib',
                'gpt_response': 'cadfabfehe',
                'model': 'dgiiaaijj',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.Application_logsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Application_logs records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Application_logs record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Application_logs.prisma().create_many(
            data=[
                {
                    # data to create a Application_logs record
                    'session_id': 'bfaiacjjfc',
                    'user_query': 'eigcfgbif',
                    'gpt_response': 'bagcfbhiig',
                    'model': 'cghideieh',
                },
                {
                    # data to create a Application_logs record
                    'session_id': 'biabhbdai',
                    'user_query': 'idghgaicb',
                    'gpt_response': 'fjfddhigg',
                    'model': 'hjaecfifb',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.Application_logsWhereUniqueInput,
        include: Optional[types.Application_logsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Application_logs record.

        Parameters
        ----------
        where
            Application_logs filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Application_logs model

        Returns
        -------
        prisma.models.Application_logs
            The deleted Application_logs record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        application_logs = await Application_logs.prisma().delete(
            where={
                'id': 2111915288,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.Application_logsWhereUniqueInput,
        include: Optional[types.Application_logsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Application_logs record.

        Parameters
        ----------
        where
            Application_logs filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Application_logs model

        Returns
        -------
        prisma.models.Application_logs
            The found Application_logs record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        application_logs = await Application_logs.prisma().find_unique(
            where={
                'id': 1149758321,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.Application_logsWhereUniqueInput,
        include: Optional[types.Application_logsInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Application_logs record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Application_logs filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Application_logs model

        Returns
        -------
        prisma.models.Application_logs
            The found Application_logs record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        application_logs = await Application_logs.prisma().find_unique_or_raise(
            where={
                'id': 1644289366,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.Application_logsWhereInput] = None,
        cursor: Optional[types.Application_logsWhereUniqueInput] = None,
        include: Optional[types.Application_logsInclude] = None,
        order: Optional[Union[types.Application_logsOrderByInput, List[types.Application_logsOrderByInput]]] = None,
        distinct: Optional[List[types.Application_logsScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Application_logs records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Application_logs records returned
        skip
            Ignore the first N results
        where
            Application_logs filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Application_logs model
        order
            Order the returned Application_logs records by any field
        distinct
            Filter Application_logs records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Application_logs]
            The list of all Application_logs records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Application_logs records
        application_logs = await Application_logs.prisma().find_many(take=10)

        # find the first 5 Application_logs records ordered by the user_query field
        application_logs = await Application_logs.prisma().find_many(
            take=5,
            order={
                'user_query': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.Application_logsWhereInput] = None,
        cursor: Optional[types.Application_logsWhereUniqueInput] = None,
        include: Optional[types.Application_logsInclude] = None,
        order: Optional[Union[types.Application_logsOrderByInput, List[types.Application_logsOrderByInput]]] = None,
        distinct: Optional[List[types.Application_logsScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Application_logs record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Application_logs filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Application_logs model
        order
            Order the returned Application_logs records by any field
        distinct
            Filter Application_logs records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Application_logs
            The first Application_logs record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Application_logs record ordered by the gpt_response field
        application_logs = await Application_logs.prisma().find_first(
            skip=1,
            order={
                'gpt_response': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.Application_logsWhereInput] = None,
        cursor: Optional[types.Application_logsWhereUniqueInput] = None,
        include: Optional[types.Application_logsInclude] = None,
        order: Optional[Union[types.Application_logsOrderByInput, List[types.Application_logsOrderByInput]]] = None,
        distinct: Optional[List[types.Application_logsScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Application_logs record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Application_logs filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Application_logs model
        order
            Order the returned Application_logs records by any field
        distinct
            Filter Application_logs records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Application_logs
            The first Application_logs record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Application_logs record ordered by the model field
        application_logs = await Application_logs.prisma().find_first_or_raise(
            skip=1,
            order={
                'model': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.Application_logsUpdateInput,
        where: types.Application_logsWhereUniqueInput,
        include: Optional[types.Application_logsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Application_logs record.

        Parameters
        ----------
        data
            Application_logs record data specifying what to update
        where
            Application_logs filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Application_logs model

        Returns
        -------
        prisma.models.Application_logs
            The updated Application_logs record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        application_logs = await Application_logs.prisma().update(
            where={
                'id': 1388290519,
            },
            data={
                # data to update the Application_logs record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.Application_logsWhereUniqueInput,
        data: types.Application_logsUpsertInput,
        include: Optional[types.Application_logsInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Application_logs filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Application_logs model

        Returns
        -------
        prisma.models.Application_logs
            The created or updated Application_logs record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        application_logs = await Application_logs.prisma().upsert(
            where={
                'id': 1647418052,
            },
            data={
                'create': {
                    'id': 1647418052,
                    'session_id': 'biabhbdai',
                    'user_query': 'idghgaicb',
                    'gpt_response': 'fjfddhigg',
                    'model': 'hjaecfifb',
                },
                'update': {
                    'session_id': 'biabhbdai',
                    'user_query': 'idghgaicb',
                    'gpt_response': 'fjfddhigg',
                    'model': 'hjaecfifb',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.Application_logsUpdateManyMutationInput,
        where: types.Application_logsWhereInput,
    ) -> int:
        """Update multiple Application_logs records

        Parameters
        ----------
        data
            Application_logs data to update the selected Application_logs records to
        where
            Filter to select the Application_logs records to update

        Returns
        -------
        int
            The total number of Application_logs records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Application_logs records
        total = await Application_logs.prisma().update_many(
            data={
                'created_at': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.Application_logsWhereInput] = None,
        cursor: Optional[types.Application_logsWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Application_logs records present in the database

        Parameters
        ----------
        select
            Select the Application_logs fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Application_logs filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.Application_logsCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Application_logs.prisma().count()

        # results: prisma.types.Application_logsCountAggregateOutput
        results = await Application_logs.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.Application_logsCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.Application_logsWhereInput] = None,
        cursor: Optional[types.Application_logsWhereUniqueInput] = None,
    ) -> types.Application_logsCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.Application_logsCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.Application_logsWhereInput] = None,
        cursor: Optional[types.Application_logsWhereUniqueInput] = None,
    ) -> Union[int, types.Application_logsCountAggregateOutput]:
        """Count the number of Application_logs records present in the database

        Parameters
        ----------
        select
            Select the Application_logs fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Application_logs filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.Application_logsCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Application_logs.prisma().count()

        # results: prisma.types.Application_logsCountAggregateOutput
        results = await Application_logs.prisma().count(
            select={
                '_all': True,
                'session_id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.Application_logsCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.Application_logsWhereInput] = None
    ) -> int:
        """Delete multiple Application_logs records.

        Parameters
        ----------
        where
            Optional Application_logs filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Application_logs records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Application_logs records
        total = await Application_logs.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.Application_logsScalarFieldKeys'],
        *,
        where: Optional['types.Application_logsWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.Application_logsAvgAggregateInput'] = None,
        sum: Optional['types.Application_logsSumAggregateInput'] = None,
        min: Optional['types.Application_logsMinAggregateInput'] = None,
        max: Optional['types.Application_logsMaxAggregateInput'] = None,
        having: Optional['types.Application_logsScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.Application_logsCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.Application_logsScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.Application_logsScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.Application_logsGroupByOutput']:
        """Group Application_logs records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Application_logs fields to group records by
        where
            Application_logs filter to select records
        take
            Limit the maximum number of Application_logs records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.Application_logsGroupByOutput]
            A list of dictionaries representing the Application_logs record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Application_logs records by user_query values
        # and count how many records are in each group
        results = await Application_logs.prisma().group_by(
            ['user_query'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class Document_storeActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Document_store]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Document_store.prisma().query_raw(
            'SELECT * FROM Document_store WHERE id = $1',
            1675546029,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Document_store
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Document_store.prisma().query_first(
            'SELECT * FROM Document_store WHERE filename = $1',
            'bhghchehcc',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.Document_storeCreateInput,
        include: Optional[types.Document_storeInclude] = None
    ) -> _PrismaModelT:
        """Create a new Document_store record.

        Parameters
        ----------
        data
            Document_store record data
        include
            Specifies which relations should be loaded on the returned Document_store model

        Returns
        -------
        prisma.models.Document_store
            The created Document_store record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Document_store record from just the required fields
        document_store = await Document_store.prisma().create(
            data={
                # data to create a Document_store record
                'filename': 'dcgchcbbf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.Document_storeCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Document_store records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Document_store record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Document_store.prisma().create_many(
            data=[
                {
                    # data to create a Document_store record
                    'filename': 'bdedcabahc',
                },
                {
                    # data to create a Document_store record
                    'filename': 'ghfhiafcb',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.Document_storeWhereUniqueInput,
        include: Optional[types.Document_storeInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Document_store record.

        Parameters
        ----------
        where
            Document_store filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Document_store model

        Returns
        -------
        prisma.models.Document_store
            The deleted Document_store record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        document_store = await Document_store.prisma().delete(
            where={
                'id': 744964398,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.Document_storeWhereUniqueInput,
        include: Optional[types.Document_storeInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Document_store record.

        Parameters
        ----------
        where
            Document_store filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Document_store model

        Returns
        -------
        prisma.models.Document_store
            The found Document_store record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        document_store = await Document_store.prisma().find_unique(
            where={
                'id': 1969681615,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.Document_storeWhereUniqueInput,
        include: Optional[types.Document_storeInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Document_store record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Document_store filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Document_store model

        Returns
        -------
        prisma.models.Document_store
            The found Document_store record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        document_store = await Document_store.prisma().find_unique_or_raise(
            where={
                'id': 1116175964,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.Document_storeWhereInput] = None,
        cursor: Optional[types.Document_storeWhereUniqueInput] = None,
        include: Optional[types.Document_storeInclude] = None,
        order: Optional[Union[types.Document_storeOrderByInput, List[types.Document_storeOrderByInput]]] = None,
        distinct: Optional[List[types.Document_storeScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Document_store records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Document_store records returned
        skip
            Ignore the first N results
        where
            Document_store filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Document_store model
        order
            Order the returned Document_store records by any field
        distinct
            Filter Document_store records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Document_store]
            The list of all Document_store records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Document_store records
        document_stores = await Document_store.prisma().find_many(take=10)

        # find the first 5 Document_store records ordered by the upload_timestamp field
        document_stores = await Document_store.prisma().find_many(
            take=5,
            order={
                'upload_timestamp': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.Document_storeWhereInput] = None,
        cursor: Optional[types.Document_storeWhereUniqueInput] = None,
        include: Optional[types.Document_storeInclude] = None,
        order: Optional[Union[types.Document_storeOrderByInput, List[types.Document_storeOrderByInput]]] = None,
        distinct: Optional[List[types.Document_storeScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Document_store record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Document_store filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Document_store model
        order
            Order the returned Document_store records by any field
        distinct
            Filter Document_store records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Document_store
            The first Document_store record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Document_store record ordered by the id field
        document_store = await Document_store.prisma().find_first(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.Document_storeWhereInput] = None,
        cursor: Optional[types.Document_storeWhereUniqueInput] = None,
        include: Optional[types.Document_storeInclude] = None,
        order: Optional[Union[types.Document_storeOrderByInput, List[types.Document_storeOrderByInput]]] = None,
        distinct: Optional[List[types.Document_storeScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Document_store record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Document_store filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Document_store model
        order
            Order the returned Document_store records by any field
        distinct
            Filter Document_store records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Document_store
            The first Document_store record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Document_store record ordered by the filename field
        document_store = await Document_store.prisma().find_first_or_raise(
            skip=1,
            order={
                'filename': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.Document_storeUpdateInput,
        where: types.Document_storeWhereUniqueInput,
        include: Optional[types.Document_storeInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Document_store record.

        Parameters
        ----------
        data
            Document_store record data specifying what to update
        where
            Document_store filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Document_store model

        Returns
        -------
        prisma.models.Document_store
            The updated Document_store record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        document_store = await Document_store.prisma().update(
            where={
                'id': 861472101,
            },
            data={
                # data to update the Document_store record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.Document_storeWhereUniqueInput,
        data: types.Document_storeUpsertInput,
        include: Optional[types.Document_storeInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Document_store filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Document_store model

        Returns
        -------
        prisma.models.Document_store
            The created or updated Document_store record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        document_store = await Document_store.prisma().upsert(
            where={
                'id': 1303003706,
            },
            data={
                'create': {
                    'id': 1303003706,
                    'filename': 'ghfhiafcb',
                },
                'update': {
                    'filename': 'ghfhiafcb',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.Document_storeUpdateManyMutationInput,
        where: types.Document_storeWhereInput,
    ) -> int:
        """Update multiple Document_store records

        Parameters
        ----------
        data
            Document_store data to update the selected Document_store records to
        where
            Filter to select the Document_store records to update

        Returns
        -------
        int
            The total number of Document_store records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Document_store records
        total = await Document_store.prisma().update_many(
            data={
                'upload_timestamp': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.Document_storeWhereInput] = None,
        cursor: Optional[types.Document_storeWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Document_store records present in the database

        Parameters
        ----------
        select
            Select the Document_store fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Document_store filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.Document_storeCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Document_store.prisma().count()

        # results: prisma.types.Document_storeCountAggregateOutput
        results = await Document_store.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.Document_storeCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.Document_storeWhereInput] = None,
        cursor: Optional[types.Document_storeWhereUniqueInput] = None,
    ) -> types.Document_storeCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.Document_storeCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.Document_storeWhereInput] = None,
        cursor: Optional[types.Document_storeWhereUniqueInput] = None,
    ) -> Union[int, types.Document_storeCountAggregateOutput]:
        """Count the number of Document_store records present in the database

        Parameters
        ----------
        select
            Select the Document_store fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Document_store filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.Document_storeCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Document_store.prisma().count()

        # results: prisma.types.Document_storeCountAggregateOutput
        results = await Document_store.prisma().count(
            select={
                '_all': True,
                'filename': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.Document_storeCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.Document_storeWhereInput] = None
    ) -> int:
        """Delete multiple Document_store records.

        Parameters
        ----------
        where
            Optional Document_store filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Document_store records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Document_store records
        total = await Document_store.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.Document_storeScalarFieldKeys'],
        *,
        where: Optional['types.Document_storeWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.Document_storeAvgAggregateInput'] = None,
        sum: Optional['types.Document_storeSumAggregateInput'] = None,
        min: Optional['types.Document_storeMinAggregateInput'] = None,
        max: Optional['types.Document_storeMaxAggregateInput'] = None,
        having: Optional['types.Document_storeScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.Document_storeCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.Document_storeScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.Document_storeScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.Document_storeGroupByOutput']:
        """Group Document_store records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Document_store fields to group records by
        where
            Document_store filter to select records
        take
            Limit the maximum number of Document_store records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.Document_storeGroupByOutput]
            A list of dictionaries representing the Document_store record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Document_store records by upload_timestamp values
        # and count how many records are in each group
        results = await Document_store.prisma().group_by(
            ['upload_timestamp'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models