# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Application_logs types

class Application_logsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Application_logs create method"""
    id: _int
    created_at: datetime.datetime


class Application_logsCreateInput(Application_logsOptionalCreateInput):
    """Required arguments to the Application_logs create method"""
    session_id: _str
    user_query: _str
    gpt_response: _str
    model: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class Application_logsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Application_logs create method, without relations"""
    id: _int
    created_at: datetime.datetime


class Application_logsCreateWithoutRelationsInput(Application_logsOptionalCreateWithoutRelationsInput):
    """Required arguments to the Application_logs create method, without relations"""
    session_id: _str
    user_query: _str
    gpt_response: _str
    model: _str

class Application_logsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'Application_logsCreateWithoutRelationsInput'
    where: 'Application_logsWhereUniqueInput'

class Application_logsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'Application_logsCreateWithoutRelationsInput'
    connect: 'Application_logsWhereUniqueInput'
    connect_or_create: 'Application_logsConnectOrCreateWithoutRelationsInput'


class Application_logsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['Application_logsCreateWithoutRelationsInput', List['Application_logsCreateWithoutRelationsInput']]
    connect: Union['Application_logsWhereUniqueInput', List['Application_logsWhereUniqueInput']]
    connect_or_create: Union['Application_logsConnectOrCreateWithoutRelationsInput', List['Application_logsConnectOrCreateWithoutRelationsInput']]

_Application_logsWhereUnique_id_Input = TypedDict(
    '_Application_logsWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

Application_logsWhereUniqueInput = _Application_logsWhereUnique_id_Input


class Application_logsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    session_id: _str
    user_query: _str
    gpt_response: _str
    model: _str
    created_at: datetime.datetime


class Application_logsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    session_id: _str
    user_query: _str
    gpt_response: _str
    model: _str
    created_at: datetime.datetime


class Application_logsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['Application_logsCreateWithoutRelationsInput']
    connect: List['Application_logsWhereUniqueInput']
    connect_or_create: List['Application_logsConnectOrCreateWithoutRelationsInput']
    set: List['Application_logsWhereUniqueInput']
    disconnect: List['Application_logsWhereUniqueInput']
    delete: List['Application_logsWhereUniqueInput']

    # TODO
    # update: List['Application_logsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['Application_logsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['Application_logsScalarWhereInput']
    # upsert: List['Application_logsUpserteWithWhereUniqueWithoutRelationsInput']


class Application_logsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'Application_logsCreateWithoutRelationsInput'
    connect: 'Application_logsWhereUniqueInput'
    connect_or_create: 'Application_logsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'Application_logsUpdateInput'
    # upsert: 'Application_logsUpsertWithoutRelationsInput'


class Application_logsUpsertInput(TypedDict):
    create: 'Application_logsCreateInput'
    update: 'Application_logsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Application_logs_id_OrderByInput = TypedDict(
    '_Application_logs_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Application_logs_session_id_OrderByInput = TypedDict(
    '_Application_logs_session_id_OrderByInput',
    {
        'session_id': 'SortOrder',
    },
    total=True
)

_Application_logs_user_query_OrderByInput = TypedDict(
    '_Application_logs_user_query_OrderByInput',
    {
        'user_query': 'SortOrder',
    },
    total=True
)

_Application_logs_gpt_response_OrderByInput = TypedDict(
    '_Application_logs_gpt_response_OrderByInput',
    {
        'gpt_response': 'SortOrder',
    },
    total=True
)

_Application_logs_model_OrderByInput = TypedDict(
    '_Application_logs_model_OrderByInput',
    {
        'model': 'SortOrder',
    },
    total=True
)

_Application_logs_created_at_OrderByInput = TypedDict(
    '_Application_logs_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_Application_logs_RelevanceInner = TypedDict(
    '_Application_logs_RelevanceInner',
    {
        'fields': 'List[Application_logsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Application_logs_RelevanceOrderByInput = TypedDict(
    '_Application_logs_RelevanceOrderByInput',
    {
        '_relevance': '_Application_logs_RelevanceInner',
    },
    total=True
)

Application_logsOrderByInput = Union[
    '_Application_logs_id_OrderByInput',
    '_Application_logs_session_id_OrderByInput',
    '_Application_logs_user_query_OrderByInput',
    '_Application_logs_gpt_response_OrderByInput',
    '_Application_logs_model_OrderByInput',
    '_Application_logs_created_at_OrderByInput',
    '_Application_logs_RelevanceOrderByInput',
]



# recursive Application_logs types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

Application_logsRelationFilter = TypedDict(
    'Application_logsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class Application_logsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class Application_logsInclude(TypedDict, total=False):
    """Application_logs relational arguments"""


    

class Application_logsIncludeFromApplication_logs(TypedDict, total=False):
    """Relational arguments for Application_logs"""


class Application_logsIncludeFromApplication_logsRecursive1(TypedDict, total=False):
    """Relational arguments for Application_logs"""


class Application_logsIncludeFromApplication_logsRecursive2(TypedDict, total=False):
    """Relational arguments for Application_logs"""


class Application_logsIncludeFromApplication_logsRecursive3(TypedDict, total=False):
    """Relational arguments for Application_logs"""


class Application_logsIncludeFromApplication_logsRecursive4(TypedDict, total=False):
    """Relational arguments for Application_logs"""

    

class Application_logsArgsFromApplication_logs(TypedDict, total=False):
    """Arguments for Application_logs"""
    include: 'Application_logsIncludeFromApplication_logsRecursive1'


class Application_logsArgsFromApplication_logsRecursive1(TypedDict, total=False):
    """Arguments for Application_logs"""
    include: 'Application_logsIncludeFromApplication_logsRecursive2'


class Application_logsArgsFromApplication_logsRecursive2(TypedDict, total=False):
    """Arguments for Application_logs"""
    include: 'Application_logsIncludeFromApplication_logsRecursive3'


class Application_logsArgsFromApplication_logsRecursive3(TypedDict, total=False):
    """Arguments for Application_logs"""
    include: 'Application_logsIncludeFromApplication_logsRecursive4'


class Application_logsArgsFromApplication_logsRecursive4(TypedDict, total=False):
    """Arguments for Application_logs"""
    
    

class FindManyApplication_logsArgsFromApplication_logs(TypedDict, total=False):
    """Arguments for Application_logs"""
    take: int
    skip: int
    order_by: Union['Application_logsOrderByInput', List['Application_logsOrderByInput']]
    where: 'Application_logsWhereInput'
    cursor: 'Application_logsWhereUniqueInput'
    distinct: List['Application_logsScalarFieldKeys']
    include: 'Application_logsIncludeFromApplication_logsRecursive1'


class FindManyApplication_logsArgsFromApplication_logsRecursive1(TypedDict, total=False):
    """Arguments for Application_logs"""
    take: int
    skip: int
    order_by: Union['Application_logsOrderByInput', List['Application_logsOrderByInput']]
    where: 'Application_logsWhereInput'
    cursor: 'Application_logsWhereUniqueInput'
    distinct: List['Application_logsScalarFieldKeys']
    include: 'Application_logsIncludeFromApplication_logsRecursive2'


class FindManyApplication_logsArgsFromApplication_logsRecursive2(TypedDict, total=False):
    """Arguments for Application_logs"""
    take: int
    skip: int
    order_by: Union['Application_logsOrderByInput', List['Application_logsOrderByInput']]
    where: 'Application_logsWhereInput'
    cursor: 'Application_logsWhereUniqueInput'
    distinct: List['Application_logsScalarFieldKeys']
    include: 'Application_logsIncludeFromApplication_logsRecursive3'


class FindManyApplication_logsArgsFromApplication_logsRecursive3(TypedDict, total=False):
    """Arguments for Application_logs"""
    take: int
    skip: int
    order_by: Union['Application_logsOrderByInput', List['Application_logsOrderByInput']]
    where: 'Application_logsWhereInput'
    cursor: 'Application_logsWhereUniqueInput'
    distinct: List['Application_logsScalarFieldKeys']
    include: 'Application_logsIncludeFromApplication_logsRecursive4'


class FindManyApplication_logsArgsFromApplication_logsRecursive4(TypedDict, total=False):
    """Arguments for Application_logs"""
    take: int
    skip: int
    order_by: Union['Application_logsOrderByInput', List['Application_logsOrderByInput']]
    where: 'Application_logsWhereInput'
    cursor: 'Application_logsWhereUniqueInput'
    distinct: List['Application_logsScalarFieldKeys']
    
    

class Document_storeIncludeFromApplication_logs(TypedDict, total=False):
    """Relational arguments for Application_logs"""


class Document_storeIncludeFromApplication_logsRecursive1(TypedDict, total=False):
    """Relational arguments for Application_logs"""


class Document_storeIncludeFromApplication_logsRecursive2(TypedDict, total=False):
    """Relational arguments for Application_logs"""


class Document_storeIncludeFromApplication_logsRecursive3(TypedDict, total=False):
    """Relational arguments for Application_logs"""


class Document_storeIncludeFromApplication_logsRecursive4(TypedDict, total=False):
    """Relational arguments for Application_logs"""

    

class Document_storeArgsFromApplication_logs(TypedDict, total=False):
    """Arguments for Application_logs"""
    include: 'Document_storeIncludeFromDocument_storeRecursive1'


class Document_storeArgsFromApplication_logsRecursive1(TypedDict, total=False):
    """Arguments for Application_logs"""
    include: 'Document_storeIncludeFromDocument_storeRecursive2'


class Document_storeArgsFromApplication_logsRecursive2(TypedDict, total=False):
    """Arguments for Application_logs"""
    include: 'Document_storeIncludeFromDocument_storeRecursive3'


class Document_storeArgsFromApplication_logsRecursive3(TypedDict, total=False):
    """Arguments for Application_logs"""
    include: 'Document_storeIncludeFromDocument_storeRecursive4'


class Document_storeArgsFromApplication_logsRecursive4(TypedDict, total=False):
    """Arguments for Application_logs"""
    
    

class FindManyDocument_storeArgsFromApplication_logs(TypedDict, total=False):
    """Arguments for Application_logs"""
    take: int
    skip: int
    order_by: Union['Document_storeOrderByInput', List['Document_storeOrderByInput']]
    where: 'Document_storeWhereInput'
    cursor: 'Document_storeWhereUniqueInput'
    distinct: List['Document_storeScalarFieldKeys']
    include: 'Document_storeIncludeFromDocument_storeRecursive1'


class FindManyDocument_storeArgsFromApplication_logsRecursive1(TypedDict, total=False):
    """Arguments for Application_logs"""
    take: int
    skip: int
    order_by: Union['Document_storeOrderByInput', List['Document_storeOrderByInput']]
    where: 'Document_storeWhereInput'
    cursor: 'Document_storeWhereUniqueInput'
    distinct: List['Document_storeScalarFieldKeys']
    include: 'Document_storeIncludeFromDocument_storeRecursive2'


class FindManyDocument_storeArgsFromApplication_logsRecursive2(TypedDict, total=False):
    """Arguments for Application_logs"""
    take: int
    skip: int
    order_by: Union['Document_storeOrderByInput', List['Document_storeOrderByInput']]
    where: 'Document_storeWhereInput'
    cursor: 'Document_storeWhereUniqueInput'
    distinct: List['Document_storeScalarFieldKeys']
    include: 'Document_storeIncludeFromDocument_storeRecursive3'


class FindManyDocument_storeArgsFromApplication_logsRecursive3(TypedDict, total=False):
    """Arguments for Application_logs"""
    take: int
    skip: int
    order_by: Union['Document_storeOrderByInput', List['Document_storeOrderByInput']]
    where: 'Document_storeWhereInput'
    cursor: 'Document_storeWhereUniqueInput'
    distinct: List['Document_storeScalarFieldKeys']
    include: 'Document_storeIncludeFromDocument_storeRecursive4'


class FindManyDocument_storeArgsFromApplication_logsRecursive4(TypedDict, total=False):
    """Arguments for Application_logs"""
    take: int
    skip: int
    order_by: Union['Document_storeOrderByInput', List['Document_storeOrderByInput']]
    where: 'Document_storeWhereInput'
    cursor: 'Document_storeWhereUniqueInput'
    distinct: List['Document_storeScalarFieldKeys']
    


FindManyApplication_logsArgs = FindManyApplication_logsArgsFromApplication_logs
FindFirstApplication_logsArgs = FindManyApplication_logsArgsFromApplication_logs


    

class Application_logsWhereInput(TypedDict, total=False):
    """Application_logs arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    session_id: Union[_str, 'types.StringFilter']
    user_query: Union[_str, 'types.StringFilter']
    gpt_response: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['Application_logsWhereInputRecursive1', List['Application_logsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['Application_logsWhereInputRecursive1']
    OR: List['Application_logsWhereInputRecursive1']
    NOT: List['Application_logsWhereInputRecursive1']


class Application_logsWhereInputRecursive1(TypedDict, total=False):
    """Application_logs arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    session_id: Union[_str, 'types.StringFilter']
    user_query: Union[_str, 'types.StringFilter']
    gpt_response: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['Application_logsWhereInputRecursive2', List['Application_logsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['Application_logsWhereInputRecursive2']
    OR: List['Application_logsWhereInputRecursive2']
    NOT: List['Application_logsWhereInputRecursive2']


class Application_logsWhereInputRecursive2(TypedDict, total=False):
    """Application_logs arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    session_id: Union[_str, 'types.StringFilter']
    user_query: Union[_str, 'types.StringFilter']
    gpt_response: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['Application_logsWhereInputRecursive3', List['Application_logsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['Application_logsWhereInputRecursive3']
    OR: List['Application_logsWhereInputRecursive3']
    NOT: List['Application_logsWhereInputRecursive3']


class Application_logsWhereInputRecursive3(TypedDict, total=False):
    """Application_logs arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    session_id: Union[_str, 'types.StringFilter']
    user_query: Union[_str, 'types.StringFilter']
    gpt_response: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['Application_logsWhereInputRecursive4', List['Application_logsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['Application_logsWhereInputRecursive4']
    OR: List['Application_logsWhereInputRecursive4']
    NOT: List['Application_logsWhereInputRecursive4']


class Application_logsWhereInputRecursive4(TypedDict, total=False):
    """Application_logs arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    session_id: Union[_str, 'types.StringFilter']
    user_query: Union[_str, 'types.StringFilter']
    gpt_response: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Application_logs types


    

class Application_logsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Application_logs arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    session_id: Union[_str, 'types.StringWithAggregatesFilter']
    user_query: Union[_str, 'types.StringWithAggregatesFilter']
    gpt_response: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['Application_logsScalarWhereWithAggregatesInputRecursive1']
    OR: List['Application_logsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['Application_logsScalarWhereWithAggregatesInputRecursive1']


class Application_logsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Application_logs arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    session_id: Union[_str, 'types.StringWithAggregatesFilter']
    user_query: Union[_str, 'types.StringWithAggregatesFilter']
    gpt_response: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['Application_logsScalarWhereWithAggregatesInputRecursive2']
    OR: List['Application_logsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['Application_logsScalarWhereWithAggregatesInputRecursive2']


class Application_logsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Application_logs arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    session_id: Union[_str, 'types.StringWithAggregatesFilter']
    user_query: Union[_str, 'types.StringWithAggregatesFilter']
    gpt_response: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['Application_logsScalarWhereWithAggregatesInputRecursive3']
    OR: List['Application_logsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['Application_logsScalarWhereWithAggregatesInputRecursive3']


class Application_logsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Application_logs arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    session_id: Union[_str, 'types.StringWithAggregatesFilter']
    user_query: Union[_str, 'types.StringWithAggregatesFilter']
    gpt_response: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['Application_logsScalarWhereWithAggregatesInputRecursive4']
    OR: List['Application_logsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['Application_logsScalarWhereWithAggregatesInputRecursive4']


class Application_logsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Application_logs arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    session_id: Union[_str, 'types.StringWithAggregatesFilter']
    user_query: Union[_str, 'types.StringWithAggregatesFilter']
    gpt_response: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class Application_logsGroupByOutput(TypedDict, total=False):
    id: _int
    session_id: _str
    user_query: _str
    gpt_response: _str
    model: _str
    created_at: datetime.datetime
    _sum: 'Application_logsSumAggregateOutput'
    _avg: 'Application_logsAvgAggregateOutput'
    _min: 'Application_logsMinAggregateOutput'
    _max: 'Application_logsMaxAggregateOutput'
    _count: 'Application_logsCountAggregateOutput'


class Application_logsAvgAggregateOutput(TypedDict, total=False):
    """Application_logs output for aggregating averages"""
    id: float


class Application_logsSumAggregateOutput(TypedDict, total=False):
    """Application_logs output for aggregating sums"""
    id: _int


class Application_logsScalarAggregateOutput(TypedDict, total=False):
    """Application_logs output including scalar fields"""
    id: _int
    session_id: _str
    user_query: _str
    gpt_response: _str
    model: _str
    created_at: datetime.datetime


Application_logsMinAggregateOutput = Application_logsScalarAggregateOutput
Application_logsMaxAggregateOutput = Application_logsScalarAggregateOutput


class Application_logsMaxAggregateInput(TypedDict, total=False):
    """Application_logs input for aggregating by max"""
    id: bool
    session_id: bool
    user_query: bool
    gpt_response: bool
    model: bool
    created_at: bool


class Application_logsMinAggregateInput(TypedDict, total=False):
    """Application_logs input for aggregating by min"""
    id: bool
    session_id: bool
    user_query: bool
    gpt_response: bool
    model: bool
    created_at: bool


class Application_logsNumberAggregateInput(TypedDict, total=False):
    """Application_logs input for aggregating numbers"""
    id: bool


Application_logsAvgAggregateInput = Application_logsNumberAggregateInput
Application_logsSumAggregateInput = Application_logsNumberAggregateInput


Application_logsCountAggregateInput = TypedDict(
    'Application_logsCountAggregateInput',
    {
        'id': bool,
        'session_id': bool,
        'user_query': bool,
        'gpt_response': bool,
        'model': bool,
        'created_at': bool,
        '_all': bool,
    },
    total=False,
)

Application_logsCountAggregateOutput = TypedDict(
    'Application_logsCountAggregateOutput',
    {
        'id': int,
        'session_id': int,
        'user_query': int,
        'gpt_response': int,
        'model': int,
        'created_at': int,
        '_all': int,
    },
    total=False,
)


Application_logsKeys = Literal[
    'id',
    'session_id',
    'user_query',
    'gpt_response',
    'model',
    'created_at',
]
Application_logsScalarFieldKeys = Literal[
    'id',
    'session_id',
    'user_query',
    'gpt_response',
    'model',
    'created_at',
]
Application_logsScalarFieldKeysT = TypeVar('Application_logsScalarFieldKeysT', bound=Application_logsScalarFieldKeys)

Application_logsRelationalFieldKeys = _NoneType

# Document_store types

class Document_storeOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Document_store create method"""
    id: _int
    upload_timestamp: datetime.datetime


class Document_storeCreateInput(Document_storeOptionalCreateInput):
    """Required arguments to the Document_store create method"""
    filename: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class Document_storeOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Document_store create method, without relations"""
    id: _int
    upload_timestamp: datetime.datetime


class Document_storeCreateWithoutRelationsInput(Document_storeOptionalCreateWithoutRelationsInput):
    """Required arguments to the Document_store create method, without relations"""
    filename: _str

class Document_storeConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'Document_storeCreateWithoutRelationsInput'
    where: 'Document_storeWhereUniqueInput'

class Document_storeCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'Document_storeCreateWithoutRelationsInput'
    connect: 'Document_storeWhereUniqueInput'
    connect_or_create: 'Document_storeConnectOrCreateWithoutRelationsInput'


class Document_storeCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['Document_storeCreateWithoutRelationsInput', List['Document_storeCreateWithoutRelationsInput']]
    connect: Union['Document_storeWhereUniqueInput', List['Document_storeWhereUniqueInput']]
    connect_or_create: Union['Document_storeConnectOrCreateWithoutRelationsInput', List['Document_storeConnectOrCreateWithoutRelationsInput']]

_Document_storeWhereUnique_id_Input = TypedDict(
    '_Document_storeWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

Document_storeWhereUniqueInput = _Document_storeWhereUnique_id_Input


class Document_storeUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    filename: _str
    upload_timestamp: datetime.datetime


class Document_storeUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    filename: _str
    upload_timestamp: datetime.datetime


class Document_storeUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['Document_storeCreateWithoutRelationsInput']
    connect: List['Document_storeWhereUniqueInput']
    connect_or_create: List['Document_storeConnectOrCreateWithoutRelationsInput']
    set: List['Document_storeWhereUniqueInput']
    disconnect: List['Document_storeWhereUniqueInput']
    delete: List['Document_storeWhereUniqueInput']

    # TODO
    # update: List['Document_storeUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['Document_storeUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['Document_storeScalarWhereInput']
    # upsert: List['Document_storeUpserteWithWhereUniqueWithoutRelationsInput']


class Document_storeUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'Document_storeCreateWithoutRelationsInput'
    connect: 'Document_storeWhereUniqueInput'
    connect_or_create: 'Document_storeConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'Document_storeUpdateInput'
    # upsert: 'Document_storeUpsertWithoutRelationsInput'


class Document_storeUpsertInput(TypedDict):
    create: 'Document_storeCreateInput'
    update: 'Document_storeUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Document_store_id_OrderByInput = TypedDict(
    '_Document_store_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Document_store_filename_OrderByInput = TypedDict(
    '_Document_store_filename_OrderByInput',
    {
        'filename': 'SortOrder',
    },
    total=True
)

_Document_store_upload_timestamp_OrderByInput = TypedDict(
    '_Document_store_upload_timestamp_OrderByInput',
    {
        'upload_timestamp': 'SortOrder',
    },
    total=True
)

_Document_store_RelevanceInner = TypedDict(
    '_Document_store_RelevanceInner',
    {
        'fields': 'List[Document_storeScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Document_store_RelevanceOrderByInput = TypedDict(
    '_Document_store_RelevanceOrderByInput',
    {
        '_relevance': '_Document_store_RelevanceInner',
    },
    total=True
)

Document_storeOrderByInput = Union[
    '_Document_store_id_OrderByInput',
    '_Document_store_filename_OrderByInput',
    '_Document_store_upload_timestamp_OrderByInput',
    '_Document_store_RelevanceOrderByInput',
]



# recursive Document_store types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

Document_storeRelationFilter = TypedDict(
    'Document_storeRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class Document_storeListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class Document_storeInclude(TypedDict, total=False):
    """Document_store relational arguments"""


    

class Application_logsIncludeFromDocument_store(TypedDict, total=False):
    """Relational arguments for Document_store"""


class Application_logsIncludeFromDocument_storeRecursive1(TypedDict, total=False):
    """Relational arguments for Document_store"""


class Application_logsIncludeFromDocument_storeRecursive2(TypedDict, total=False):
    """Relational arguments for Document_store"""


class Application_logsIncludeFromDocument_storeRecursive3(TypedDict, total=False):
    """Relational arguments for Document_store"""


class Application_logsIncludeFromDocument_storeRecursive4(TypedDict, total=False):
    """Relational arguments for Document_store"""

    

class Application_logsArgsFromDocument_store(TypedDict, total=False):
    """Arguments for Document_store"""
    include: 'Application_logsIncludeFromApplication_logsRecursive1'


class Application_logsArgsFromDocument_storeRecursive1(TypedDict, total=False):
    """Arguments for Document_store"""
    include: 'Application_logsIncludeFromApplication_logsRecursive2'


class Application_logsArgsFromDocument_storeRecursive2(TypedDict, total=False):
    """Arguments for Document_store"""
    include: 'Application_logsIncludeFromApplication_logsRecursive3'


class Application_logsArgsFromDocument_storeRecursive3(TypedDict, total=False):
    """Arguments for Document_store"""
    include: 'Application_logsIncludeFromApplication_logsRecursive4'


class Application_logsArgsFromDocument_storeRecursive4(TypedDict, total=False):
    """Arguments for Document_store"""
    
    

class FindManyApplication_logsArgsFromDocument_store(TypedDict, total=False):
    """Arguments for Document_store"""
    take: int
    skip: int
    order_by: Union['Application_logsOrderByInput', List['Application_logsOrderByInput']]
    where: 'Application_logsWhereInput'
    cursor: 'Application_logsWhereUniqueInput'
    distinct: List['Application_logsScalarFieldKeys']
    include: 'Application_logsIncludeFromApplication_logsRecursive1'


class FindManyApplication_logsArgsFromDocument_storeRecursive1(TypedDict, total=False):
    """Arguments for Document_store"""
    take: int
    skip: int
    order_by: Union['Application_logsOrderByInput', List['Application_logsOrderByInput']]
    where: 'Application_logsWhereInput'
    cursor: 'Application_logsWhereUniqueInput'
    distinct: List['Application_logsScalarFieldKeys']
    include: 'Application_logsIncludeFromApplication_logsRecursive2'


class FindManyApplication_logsArgsFromDocument_storeRecursive2(TypedDict, total=False):
    """Arguments for Document_store"""
    take: int
    skip: int
    order_by: Union['Application_logsOrderByInput', List['Application_logsOrderByInput']]
    where: 'Application_logsWhereInput'
    cursor: 'Application_logsWhereUniqueInput'
    distinct: List['Application_logsScalarFieldKeys']
    include: 'Application_logsIncludeFromApplication_logsRecursive3'


class FindManyApplication_logsArgsFromDocument_storeRecursive3(TypedDict, total=False):
    """Arguments for Document_store"""
    take: int
    skip: int
    order_by: Union['Application_logsOrderByInput', List['Application_logsOrderByInput']]
    where: 'Application_logsWhereInput'
    cursor: 'Application_logsWhereUniqueInput'
    distinct: List['Application_logsScalarFieldKeys']
    include: 'Application_logsIncludeFromApplication_logsRecursive4'


class FindManyApplication_logsArgsFromDocument_storeRecursive4(TypedDict, total=False):
    """Arguments for Document_store"""
    take: int
    skip: int
    order_by: Union['Application_logsOrderByInput', List['Application_logsOrderByInput']]
    where: 'Application_logsWhereInput'
    cursor: 'Application_logsWhereUniqueInput'
    distinct: List['Application_logsScalarFieldKeys']
    
    

class Document_storeIncludeFromDocument_store(TypedDict, total=False):
    """Relational arguments for Document_store"""


class Document_storeIncludeFromDocument_storeRecursive1(TypedDict, total=False):
    """Relational arguments for Document_store"""


class Document_storeIncludeFromDocument_storeRecursive2(TypedDict, total=False):
    """Relational arguments for Document_store"""


class Document_storeIncludeFromDocument_storeRecursive3(TypedDict, total=False):
    """Relational arguments for Document_store"""


class Document_storeIncludeFromDocument_storeRecursive4(TypedDict, total=False):
    """Relational arguments for Document_store"""

    

class Document_storeArgsFromDocument_store(TypedDict, total=False):
    """Arguments for Document_store"""
    include: 'Document_storeIncludeFromDocument_storeRecursive1'


class Document_storeArgsFromDocument_storeRecursive1(TypedDict, total=False):
    """Arguments for Document_store"""
    include: 'Document_storeIncludeFromDocument_storeRecursive2'


class Document_storeArgsFromDocument_storeRecursive2(TypedDict, total=False):
    """Arguments for Document_store"""
    include: 'Document_storeIncludeFromDocument_storeRecursive3'


class Document_storeArgsFromDocument_storeRecursive3(TypedDict, total=False):
    """Arguments for Document_store"""
    include: 'Document_storeIncludeFromDocument_storeRecursive4'


class Document_storeArgsFromDocument_storeRecursive4(TypedDict, total=False):
    """Arguments for Document_store"""
    
    

class FindManyDocument_storeArgsFromDocument_store(TypedDict, total=False):
    """Arguments for Document_store"""
    take: int
    skip: int
    order_by: Union['Document_storeOrderByInput', List['Document_storeOrderByInput']]
    where: 'Document_storeWhereInput'
    cursor: 'Document_storeWhereUniqueInput'
    distinct: List['Document_storeScalarFieldKeys']
    include: 'Document_storeIncludeFromDocument_storeRecursive1'


class FindManyDocument_storeArgsFromDocument_storeRecursive1(TypedDict, total=False):
    """Arguments for Document_store"""
    take: int
    skip: int
    order_by: Union['Document_storeOrderByInput', List['Document_storeOrderByInput']]
    where: 'Document_storeWhereInput'
    cursor: 'Document_storeWhereUniqueInput'
    distinct: List['Document_storeScalarFieldKeys']
    include: 'Document_storeIncludeFromDocument_storeRecursive2'


class FindManyDocument_storeArgsFromDocument_storeRecursive2(TypedDict, total=False):
    """Arguments for Document_store"""
    take: int
    skip: int
    order_by: Union['Document_storeOrderByInput', List['Document_storeOrderByInput']]
    where: 'Document_storeWhereInput'
    cursor: 'Document_storeWhereUniqueInput'
    distinct: List['Document_storeScalarFieldKeys']
    include: 'Document_storeIncludeFromDocument_storeRecursive3'


class FindManyDocument_storeArgsFromDocument_storeRecursive3(TypedDict, total=False):
    """Arguments for Document_store"""
    take: int
    skip: int
    order_by: Union['Document_storeOrderByInput', List['Document_storeOrderByInput']]
    where: 'Document_storeWhereInput'
    cursor: 'Document_storeWhereUniqueInput'
    distinct: List['Document_storeScalarFieldKeys']
    include: 'Document_storeIncludeFromDocument_storeRecursive4'


class FindManyDocument_storeArgsFromDocument_storeRecursive4(TypedDict, total=False):
    """Arguments for Document_store"""
    take: int
    skip: int
    order_by: Union['Document_storeOrderByInput', List['Document_storeOrderByInput']]
    where: 'Document_storeWhereInput'
    cursor: 'Document_storeWhereUniqueInput'
    distinct: List['Document_storeScalarFieldKeys']
    


FindManyDocument_storeArgs = FindManyDocument_storeArgsFromDocument_store
FindFirstDocument_storeArgs = FindManyDocument_storeArgsFromDocument_store


    

class Document_storeWhereInput(TypedDict, total=False):
    """Document_store arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    filename: Union[_str, 'types.StringFilter']
    upload_timestamp: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['Document_storeWhereInputRecursive1', List['Document_storeWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['Document_storeWhereInputRecursive1']
    OR: List['Document_storeWhereInputRecursive1']
    NOT: List['Document_storeWhereInputRecursive1']


class Document_storeWhereInputRecursive1(TypedDict, total=False):
    """Document_store arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    filename: Union[_str, 'types.StringFilter']
    upload_timestamp: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['Document_storeWhereInputRecursive2', List['Document_storeWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['Document_storeWhereInputRecursive2']
    OR: List['Document_storeWhereInputRecursive2']
    NOT: List['Document_storeWhereInputRecursive2']


class Document_storeWhereInputRecursive2(TypedDict, total=False):
    """Document_store arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    filename: Union[_str, 'types.StringFilter']
    upload_timestamp: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['Document_storeWhereInputRecursive3', List['Document_storeWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['Document_storeWhereInputRecursive3']
    OR: List['Document_storeWhereInputRecursive3']
    NOT: List['Document_storeWhereInputRecursive3']


class Document_storeWhereInputRecursive3(TypedDict, total=False):
    """Document_store arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    filename: Union[_str, 'types.StringFilter']
    upload_timestamp: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['Document_storeWhereInputRecursive4', List['Document_storeWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['Document_storeWhereInputRecursive4']
    OR: List['Document_storeWhereInputRecursive4']
    NOT: List['Document_storeWhereInputRecursive4']


class Document_storeWhereInputRecursive4(TypedDict, total=False):
    """Document_store arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    filename: Union[_str, 'types.StringFilter']
    upload_timestamp: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Document_store types


    

class Document_storeScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Document_store arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    filename: Union[_str, 'types.StringWithAggregatesFilter']
    upload_timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['Document_storeScalarWhereWithAggregatesInputRecursive1']
    OR: List['Document_storeScalarWhereWithAggregatesInputRecursive1']
    NOT: List['Document_storeScalarWhereWithAggregatesInputRecursive1']


class Document_storeScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Document_store arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    filename: Union[_str, 'types.StringWithAggregatesFilter']
    upload_timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['Document_storeScalarWhereWithAggregatesInputRecursive2']
    OR: List['Document_storeScalarWhereWithAggregatesInputRecursive2']
    NOT: List['Document_storeScalarWhereWithAggregatesInputRecursive2']


class Document_storeScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Document_store arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    filename: Union[_str, 'types.StringWithAggregatesFilter']
    upload_timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['Document_storeScalarWhereWithAggregatesInputRecursive3']
    OR: List['Document_storeScalarWhereWithAggregatesInputRecursive3']
    NOT: List['Document_storeScalarWhereWithAggregatesInputRecursive3']


class Document_storeScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Document_store arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    filename: Union[_str, 'types.StringWithAggregatesFilter']
    upload_timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['Document_storeScalarWhereWithAggregatesInputRecursive4']
    OR: List['Document_storeScalarWhereWithAggregatesInputRecursive4']
    NOT: List['Document_storeScalarWhereWithAggregatesInputRecursive4']


class Document_storeScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Document_store arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    filename: Union[_str, 'types.StringWithAggregatesFilter']
    upload_timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class Document_storeGroupByOutput(TypedDict, total=False):
    id: _int
    filename: _str
    upload_timestamp: datetime.datetime
    _sum: 'Document_storeSumAggregateOutput'
    _avg: 'Document_storeAvgAggregateOutput'
    _min: 'Document_storeMinAggregateOutput'
    _max: 'Document_storeMaxAggregateOutput'
    _count: 'Document_storeCountAggregateOutput'


class Document_storeAvgAggregateOutput(TypedDict, total=False):
    """Document_store output for aggregating averages"""
    id: float


class Document_storeSumAggregateOutput(TypedDict, total=False):
    """Document_store output for aggregating sums"""
    id: _int


class Document_storeScalarAggregateOutput(TypedDict, total=False):
    """Document_store output including scalar fields"""
    id: _int
    filename: _str
    upload_timestamp: datetime.datetime


Document_storeMinAggregateOutput = Document_storeScalarAggregateOutput
Document_storeMaxAggregateOutput = Document_storeScalarAggregateOutput


class Document_storeMaxAggregateInput(TypedDict, total=False):
    """Document_store input for aggregating by max"""
    id: bool
    filename: bool
    upload_timestamp: bool


class Document_storeMinAggregateInput(TypedDict, total=False):
    """Document_store input for aggregating by min"""
    id: bool
    filename: bool
    upload_timestamp: bool


class Document_storeNumberAggregateInput(TypedDict, total=False):
    """Document_store input for aggregating numbers"""
    id: bool


Document_storeAvgAggregateInput = Document_storeNumberAggregateInput
Document_storeSumAggregateInput = Document_storeNumberAggregateInput


Document_storeCountAggregateInput = TypedDict(
    'Document_storeCountAggregateInput',
    {
        'id': bool,
        'filename': bool,
        'upload_timestamp': bool,
        '_all': bool,
    },
    total=False,
)

Document_storeCountAggregateOutput = TypedDict(
    'Document_storeCountAggregateOutput',
    {
        'id': int,
        'filename': int,
        'upload_timestamp': int,
        '_all': int,
    },
    total=False,
)


Document_storeKeys = Literal[
    'id',
    'filename',
    'upload_timestamp',
]
Document_storeScalarFieldKeys = Literal[
    'id',
    'filename',
    'upload_timestamp',
]
Document_storeScalarFieldKeysT = TypeVar('Document_storeScalarFieldKeysT', bound=Document_storeScalarFieldKeys)

Document_storeRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields